const keyword is used
eg
const int a=10;
or
int const i=10; //is also valid

it is important to initialize the constant variables
const i;
i=10; // is invalid

const i=10; //is valid
//////////////////////////////////////////

int j=12;
const int &k=j;
j++;
cout<<k<<endl;    //in this k++ world give an error
                  //j++ wont give an error
                  //cout k also doesnt give an error
                  //as only the path through k os constant and not through j
                  //any changes in j would reflect in k but any changes in k
                  would give an error.
/////////////////////////////////////////
int const j3=123;
int &k3=j3;       //k3++ this would give an error because k3 is a reference
k3++;             //to a read only path.
/////////////////////////////////////////

int const i=10;
int *p=&i;       //this would give an error. We cant simply use a pointer
                 //for a const variable.We use a const pointer

int const j=10;
int const *ptr=&j; //this is the right way

///////////////////////////////////////////
IMPORTANT

CONSTANT POINTERS AND POINTERS TO CONSTANTS

Whenever we use pointers with constants we read it in reverse order for understanding

Eg
int i=10,j=20;
int const *p = &i;

Reading in reverse order: p is a pointer to a constant integer
now
(*p)++; //would give an error

but
p = &j; //would not give an error as p is not a constant pointer

NOW

int * const p2= &i;

Reading in reverse order: p2 is a constant pointer to an integer

(*p2)++; //would not give an error

p2=&j; //this would give an error as p2 is a constant pointer

NOW

int const * const p3=&i;

Reading in reverse order: p3 is a constant pointer to a constant integer
////////////////////////////// 
